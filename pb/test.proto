syntax = "proto3";

package pb;

import "github.com/rms1000watt/degeneres/pb/address.proto";

option (dg.version) = "v0.1.0";
option (dg.author) = "Ryan Smith";
option (dg.project_name) = "Degeneres Test";
option (dg.docker_path) = "docker.io/rms1000watt/degeneres-test";
option (dg.import_path) = "github.com/rms1000watt/degeneres-test";

option (dg.certs_path) = "./certs";
option (dg.public_key_name) = "server.cer";
option (dg.private_key_name) = "server.key";

service Ballpark {
    option (dg.short_description) = "Ballpark Service API for stadium information";
    option (dg.middleware.cors) = "localhost,127.0.0.1,www.example.com";
    option (dg.middleware.no_cache) = true;

    rpc Person(PersonIn) returns (PersonOut) {
        option (dg.middleware.no_cache) = false;
        option (dg.method) = "GET";
        option (dg.method) = "POST";
    }

    rpc Ticket(TicketIn) returns (TicketOut) {
        option (dg.method) = "GET";
        option (dg.method) = "POST";
        option (dg.method) = "PUT";
    }

    rpc Management(ManagementIn) returns (ManagementOut) {}
}

message PersonIn {
    int64 id                = 1;
    string first_name       = 2 [(dg.validate) = "maxLength=100", (dg.transform) = "truncate=50"];
    string last_name        = 3 [(dg.validate) = "maxLength=1000,required,minLength=1", (dg.transform) = "truncate=50,hash"];
    address.Address address = 4;
}

message PersonOut {
    string first_name       = 1;
    string last_name        = 2;
    address.Address address = 3;
    Profile profile         = 4;
}

message TicketIn {
    string id = 1;
}

message TicketOut {
    string row  = 1;
    string seat = 2;
}

message ManagementIn {
    repeated bool power = 1;
}

message ManagementOut {
    repeated bool success = 1;
}

message Profile {
    string email    = 1 [(dg.transform) = "hash"];
    string username = 2;
}
